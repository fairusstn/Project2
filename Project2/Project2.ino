#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSerif9pt7b.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define LEDQ1R 14
#define LEDQ2R 27
#define LEDQ3R 26
#define LEDQ4R 25

#define LEDQ1G 5    // Ca Yellow
#define LEDQ2G 18   // Ca White
#define LEDQ3G 19   // Ca RED
#define LEDQ4G 3    // Ca Green

#define Quarter1 34
#define Quarter2 35
#define Quarter3 32
#define Quarter4 33
#define Q1 0
#define Q2 1
#define Q3 2
#define Q4 3
#define VREF 5.0      // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point
int analogBuffer[4][SCOUNT];    // store the analog value in the array, read from ADC
int analogBufferTemp[4][SCOUNT];
int analogBufferIndex = 0,copyIndex = 0,j = 0;
float tdsValue = 0,temperature = 25;
int LEDG[4] = {LEDQ1G , LEDQ2G , LEDQ3G , LEDQ4G};
float Quarter[4][128];
float tempQ[4] = {0.0,0.0,0.0,0.0};
float averageVoltage[4] = {0,0,0,0};
int x=0;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//const char *SSID = "DowroongMansion";
//const char *PWD = "11223344";
const char *SSID = "Fairuz";
const char *PWD = "1212312121";
const char* mqttServer = "192.168.43.151";
const int mqttPort = 1883;

WiFiClient espClient;
PubSubClient client(espClient);

float Hmaw = 0.0;
float DEE[]={ 0.0016,0.0031,0.0047,0.0063,0.0078,0.0094,0.0109,0.0125,0.0141,0.0156,0.0172,0.0188,0.0203,0.0219,0.0234,0.0250,0.0266,0.0281,0.0297,0.0313,0.0328,0.0344,0.0359,0.0375,0.0391,0.0406,0.0422,0.0437,0.0453,0.0469,0.0484,0.0500,0.0516,0.0531,0.0547,0.0562,0.0578,0.0594,0.0609,0.0625,0.0640,0.0656,0.0672,0.0687,0.0703,0.0719,0.0734,0.0750,0.0765,0.0781,0.0797,0.0812,0.0828,0.0844,0.0859,0.0875,0.0891,0.0906,0.0922,0.0937,0.0953,0.0969,0.0984,0.1000,0.1015,0.1031,0.1047,0.1062,0.1078,0.1094,0.1109,0.1125,0.1141,0.1156,0.1172,0.1187,0.1203,0.1219,0.1234,0.1250,0.1266,0.1281,0.1297,0.1312,0.1328,0.1344,0.1359,0.1375,0.1391,0.1406,0.1422,0.1437,0.1453,0.1469,0.1484,0.1500,0.1515,0.1531,0.1547,0.1562,0.1578,0.1594,0.1609,0.1625,0.1640,0.1656,0.1672,0.1687,0.1703,0.1719,0.1734,0.1750,0.1765,0.1781,0.1797,0.1812,0.1828,0.1843,0.1859,0.1875,0.1890,0.1906,0.1922,0.1937,0.1953,0.1969,0.1984,0.2000,0.2015,0.2031,0.2047,0.2062,0.2078,0.2094,0.2109,0.2125,0.2140,0.2156,0.2172,0.2187,0.2203,0.2218,0.2234,0.2250,0.2265,0.2281,0.2297,0.2312,0.2328,0.2343,0.2359,0.2375,0.2390,0.2406,0.2422,0.2437,0.2453,0.2468,0.2484,0.2500,0.2515,0.2531,0.2547,0.2562,0.2578,0.2594,0.2609,0.2625,0.2640,0.2656,0.2672,0.2687,0.2703,0.2718,0.2734,0.2750,0.2765,0.2781,0.2797,0.2812,0.2828,0.2843,0.2859,0.2875,0.2890,0.2906,0.2921,0.2937,0.2953,0.2968,0.2984,0.3000,0.3015,0.3031,0.3047,0.3062,0.3078,0.3093,0.3109,0.3125,0.3140,0.3156,0.3171,0.3187,0.3203,0.3218,0.3234,0.3250,0.3265,0.3281,0.3297,0.3312,0.3328,0.3343,0.3359,0.3375,0.3390,0.3406,0.3422,0.3437,0.3453,0.3468,0.3484,0.3500,0.3515,0.3531,0.3546,0.3562,0.3578,0.3593,0.3609,0.3625,0.3640,0.3656,0.3672,0.3687,0.3703,0.3718,0.3734,0.3750,0.3765,0.3781,0.3796,0.3812,0.3828,0.3843,0.3859,0.3875,0.3890,0.3906,0.3921,0.3937,0.3953,0.3968,0.3984,0.3999,0.4015,0.4031,0.4046,0.4062,0.4078,0.4093,0.4109,0.4124,0.4140,0.4156,0.4171,0.4187,0.4203,0.4218,0.4234,0.4250,0.4265,0.4281,0.4296,0.4312,0.4328,0.4343,0.4359,0.4374,0.4390,0.4406,0.4421,0.4437,0.4453,0.4468,0.4484,0.4500,0.4515,0.4531,0.4546,0.4562,0.4578,0.4593,0.4609,0.4624,0.4640,0.4656,0.4671,0.4687,0.4703,0.4718,0.4734,0.4749,0.4765,0.4781,0.4796,0.4812,0.4828,0.4843,0.4859,0.4874,0.4890,0.4906,0.4921,0.4937,0.4953,0.4968,0.4984,0.4999,0.5015,0.5031,0.5046,0.5062,0.5077,0.5093,0.5109,0.5124,0.5140,0.5156,0.5171,0.5187,0.5203,0.5218,0.5234,0.5249,0.5265,0.5281,0.5296,0.5312,0.5328,0.5343,0.5359,0.5374,0.5390,0.5406,0.5421,0.5437,0.5452,0.5468,0.5484,0.5499,0.5515,0.5531,0.5546,0.5562,0.5577,0.5593,0.5609,0.5624,0.5640,0.5656,0.5671,0.5687,0.5702,0.5718,0.5734,0.5749,0.5765,0.5781,0.5796,0.5812,0.5828,0.5843,0.5859,0.5874,0.5890,0.5906,0.5921,0.5937,0.5953,0.5968,0.5984,0.5999,0.6015,0.6031,0.6046,0.6062,0.6077,0.6093,0.6109,0.6124,0.6140,0.6156,0.6171,0.6187,0.6202,0.6218,0.6234,0.6249,0.6265,0.6281,0.6296,0.6312,0.6327,0.6343,0.6359,0.6374,0.6390,0.6406,0.6421,0.6437,0.6452,0.6468,0.6484,0.6499,0.6515,0.6531,0.6546,0.6562,0.6577,0.6593,0.6609,0.6624,0.6640,0.6655,0.6671,0.6687,0.6702,0.6718,0.6734,0.6749,0.6765,0.6780,0.6796,0.6812,0.6827,0.6843,0.6859,0.6874,0.6890,0.6906,0.6921,0.6937,0.6952,0.6968,0.6984,0.6999,0.7015,0.7031,0.7046,0.7062,0.7077,0.7093,0.7109,0.7124,0.7140,0.7155,0.7171,0.7187,0.7202,0.7218,0.7234,0.7249,0.7265,0.7280,0.7296,0.7312,0.7327,0.7343,0.7358,0.7374,0.7390,0.7405,0.7421,0.7437,0.7452,0.7468,0.7484,0.7499,0.7515,0.7530,0.7546,0.7562,0.7577,0.7593,0.7609,0.7624,0.7640,0.7655,0.7671,0.7687,0.7702,0.7718,0.7734,0.7749,0.7765,0.7780,0.7796,0.7812,0.7827,0.7843,0.7858,0.7874,0.7890,0.7905,0.7921,0.7937,0.7952,0.7968,0.7983,0.7999,0.8015,0.8030,0.8046,0.8062,0.8077,0.8093,0.8109,0.8124,0.8140,0.8155,0.8171,0.8187,0.8202,0.8218,0.8233,0.8249,0.8265,0.8280,0.8296,0.8312,0.8327,0.8343,0.8358,0.8374,0.8390,0.8405,0.8421,0.8436,0.8452,0.8468,0.8483,0.8499,0.8515,0.8530,0.8546,0.8561,0.8577,0.8593,0.8608,0.8624,0.8640,0.8655,0.8671,0.8687,0.8702,0.8718,0.8733,0.8749,0.8765,0.8780,0.8796,0.8812,0.8827,0.8843,0.8858,0.8874,0.8890,0.8905,0.8921,0.8936,0.8952,0.8968,0.8983,0.8999,0.9015,0.9030,0.9046,0.9061,0.9077,0.9093,0.9108,0.9124,0.9140,0.9155,0.9171,0.9186,0.9202,0.9218,0.9233,0.9249,0.9265,0.9280,0.9296,0.9311,0.9327,0.9343,0.9358,0.9374,0.9390,0.9405,0.9421,0.9436,0.9452,0.9468,0.9483,0.9499,0.9514,0.9530,0.9546,0.9561,0.9577,0.9593,0.9608,0.9624,0.9639,0.9655,0.9671,0.9686,0.9702,0.9718,0.9733,0.9749,0.9765,0.9780,0.9796,0.9811,0.9827,0.9843,0.9858,0.9874,0.9890,0.9905,0.9921,0.9936,0.9952,0.9968,0.9983,0.9999,1.0014,1.0030,1.0046,1.0061,1.0077,1.0093,1.0108,1.0124,1.0139,1.0155,1.0171,1.0186,1.0202,1.0218,1.0233,1.0249,1.0265,1.0280,1.0296,1.0311,1.0327,1.0343,1.0358,1.0374,1.0389,1.0405,1.0421,1.0436,1.0452,1.0468,1.0483,1.0499,1.0514,1.0530,1.0546,1.0561,1.0577,1.0593,1.0608,1.0624,1.0639,1.0655,1.0671,1.0686,1.0702,1.0718,1.0733,1.0749,1.0764,1.0780,1.0796,1.0811,1.0827,1.0842,1.0858,1.0874,1.0889,1.0905,1.0921,1.0936,1.0952,1.0968,1.0983,1.0999,1.1014,1.1030,1.1046,1.1061,1.1077,1.1092,1.1108,1.1124,1.1139,1.1155,1.1171,1.1186,1.1202,1.1217,1.1233,1.1249,1.1264,1.1280,1.1296,1.1311,1.1327,1.1343,1.1358,1.1374,1.1389,1.1405,1.1421,1.1436,1.1452,1.1467,1.1483,1.1499,1.1514,1.1530,1.1546,1.1561,1.1577,1.1592,1.1608,1.1624,1.1639,1.1655,1.1671,1.1686,1.1702,1.1717,1.1733,1.1749,1.1764,1.1780,1.1796,1.1811,1.1827,1.1842,1.1858,1.1874,1.1889,1.1905,1.1920,1.1936,1.1952,1.1967,1.1983,1.1999,1.2014,1.2030,1.2046,1.2061,1.2077,1.2092,1.2108,1.2124,1.2139,1.2155,1.2170,1.2186,1.2202,1.2217,1.2233,1.2249,1.2264,1.2280,1.2296,1.2311,1.2327,1.2342,1.2358,1.2374,1.2389,1.2405,1.2421,1.2436,1.2452,1.2467,1.2483,1.2499,1.2514,1.2530,1.2545,1.2561,1.2577,1.2592,1.2608,1.2624,1.2639,1.2655,1.2670,1.2686,1.2702,1.2717,1.2733,1.2749,1.2764,1.2780,1.2795,1.2811,1.2827,1.2842,1.2858,1.2874,1.2889,1.2905,1.2920,1.2936,1.2952,1.2967,1.2983,1.2998,1.3014,1.3030,1.3045,1.3061,1.3077,1.3092,1.3108,1.3124,1.3139,1.3155,1.3170,1.3186,1.3202,1.3217,1.3233,1.3248,1.3264,1.3280,1.3295,1.3311,1.3327,1.3342,1.3358,1.3374,1.3389,1.3405,1.3420,1.3436,1.3452,1.3467,1.3483,1.3499,1.3514,1.3530,1.3545,1.3561,1.3577,1.3592,1.3608,1.3623,1.3639,1.3655,1.3670,1.3686,1.3702,1.3717,1.3733,1.3748,1.3764,1.3780,1.3795,1.3811,1.3827,1.3842,1.3858,1.3873,1.3889,1.3905,1.3920,1.3936,1.3952,1.3967,1.3983,1.3998,1.4014,1.4030,1.4045,1.4061,1.4076,1.4092,1.4108,1.4123,1.4139,1.4155,1.4170,1.4186,1.4202,1.4217,1.4233,1.4248,1.4264,1.4280,1.4295,1.4311,1.4326,1.4342,1.4358,1.4373,1.4389,1.4405,1.4420,1.4436,1.4452,1.4467,1.4483,1.4498,1.4514,1.4530,1.4545,1.4561,1.4576,1.4592,1.4608,1.4623,1.4639,1.4655,1.4670,1.4686,1.4701,1.4717,1.4733,1.4748,1.4764,1.4780,1.4795,1.4811,1.4827,1.4842,1.4858,1.4873,1.4889,1.4905,1.4920,1.4936,1.4951,1.4967,1.4983,1.4998,1.5014,1.5030,1.5045,1.5061,1.5076,1.5092,1.5108,1.5123,1.5139,1.5155,1.5170,1.5186,1.5201,1.5217,1.5233,1.5248,1.5264,1.5280,1.5295,1.5311,1.5326,1.5342,1.5358,1.5373,1.5389,1.5404,1.5420,1.5436,1.5451,1.5467,1.5483,1.5498,1.5514,1.5530,1.5545,1.5561,1.5576,1.5592,1.5608,1.5623,1.5639,1.5654,1.5670,1.5686,1.5701,1.5717,1.5733,1.5748,1.5764,1.5780,1.5795,1.5811,1.5826,1.5842,1.5858,1.5873,1.5889,1.5905,1.5920,1.5936,1.5951,1.5967,1.5983,1.5998,1.6014,1.6029,1.6045,1.6061,1.6076,1.6092,1.6108,1.6123,1.6139,1.6154,1.6170,1.6186,1.6201,1.6217,1.6233,1.6248,1.6264,1.6279,1.6295,1.6311,1.6326,1.6342,1.6358,1.6373,1.6389,1.6404,1.6420,1.6436,1.6451,1.6467,1.6482,1.6498,1.6514,1.6529,1.6545,1.6561,1.6576,1.6592,1.6608,1.6623,1.6639,1.6654,1.6670,1.6686,1.6701,1.6717,1.6732,1.6748,1.6764,1.6779,1.6795,1.6811,1.6826,1.6842,1.6858,1.6873,1.6889,1.6904,1.6920,1.6936,1.6951,1.6967,1.6983,1.6998,1.7014,1.7029,1.7045,1.7061,1.7076,1.7092,1.7107,1.7123,1.7139,1.7154,1.7170,1.7186,1.7201,1.7217,1.7232,1.7248,1.7264,1.7279,1.7295,1.7311,1.7326,1.7342,1.7357,1.7373,1.7389,1.7404,1.7420,1.7435,1.7451,1.7467,1.7482,1.7498,1.7514,1.7529,1.7545,1.7560,1.7576,1.7592,1.7607,1.7623,1.7639,1.7654,1.7670,1.7686,1.7701,1.7717,1.7732,1.7748,1.7764,1.7779,1.7795,1.7810,1.7826,1.7842,1.7857,1.7873,1.7889,1.7904,1.7920,1.7936,1.7951,1.7967,1.7982,1.7998,1.8014,1.8029,1.8045,1.8060,1.8076,1.8092,1.8107,1.8123,1.8139,1.8154,1.8170,1.8185,1.8201,1.8217,1.8232,1.8248,1.8264,1.8279,1.8295,1.8310,1.8326,1.8342,1.8357,1.8373,1.8389,1.8404,1.8420,1.8435,1.8451,1.8467,1.8482,1.8498,1.8513,1.8529,1.8545,1.8560,1.8576,1.8592,1.8607,1.8623,1.8638,1.8654,1.8670,1.8685,1.8701,1.8717,1.8732,1.8748,1.8764,1.8779,1.8795,1.8810,1.8826,1.8842,1.8857,1.8873,1.8888,1.8904,1.8920,1.8935,1.8951,1.8967,1.8982,1.8998,1.9014,1.9029,1.9045,1.9060,1.9076,1.9092,1.9107,1.9123,1.9138,1.9154,1.9170,1.9185,1.9201,1.9217,1.9232,1.9248,1.9263,1.9279,1.9295,1.9310,1.9326,1.9342,1.9357,1.9373,1.9388,1.9404,1.9420,1.9435,1.9451,1.9467,1.9482,1.9498,1.9513,1.9529,1.9545,1.9560,1.9576,1.9591,1.9607,1.9623,1.9638,1.9654,1.9670,1.9685,1.9701,1.9717,1.9732,1.9748,1.9763,1.9779,1.9795,1.9810,1.9826,1.9842,1.9857,1.9873,1.9888,1.9904,1.9920,1.9935,1.9951,1.9966,1.9982,1.9998,2.0013,2.0029,2.0045,2.0060,2.0076,2.0092,2.0107,2.0123,2.0138,2.0154,2.0170,2.0185,2.0201,2.0217,2.0232,2.0248,2.0263,2.0279,2.0295,2.0310,2.0326,2.0341,2.0357,2.0373,2.0388,2.0404,2.0420,2.0435,2.0451,2.0466,2.0482,2.0498,2.0513,2.0529,2.0545,2.0560,2.0576,2.0591,2.0607,2.0623,2.0638,2.0654,2.0670,2.0685,2.0701,2.0716,2.0732,2.0748,2.0763,2.0779,2.0794,2.0810,2.0826,2.0841,2.0857,2.0873,2.0888,2.0904,2.0919,2.0935,2.0951,2.0966,2.0982,2.0998,2.1013,2.1029,2.1044,2.1060,2.1076,2.1091,2.1107,2.1123,2.1138,2.1154,2.1170,2.1185,2.1201,2.1216,2.1232,2.1248,2.1263,2.1279,2.1295,2.1310,2.1326,2.1341,2.1357,2.1373,2.1388,2.1404,2.1419,2.1435,2.1451,2.1466,2.1482,2.1498,2.1513,2.1529,2.1544,2.1560,2.1576,2.1591,2.1607,2.1623,2.1638,2.1654,2.1669,2.1685,2.1701,2.1716,2.1732,2.1748,2.1763,2.1779,2.1794,2.1810,2.1826,2.1841,2.1857,2.1872,2.1888,2.1904,2.1919,2.1935,2.1951,2.1966,2.1982,2.1997,2.2013,2.2029,2.2044,2.2060,2.2076,2.2091,2.2107,2.2122,2.2138,2.2154,2.2169,2.2185,2.2201,2.2216,2.2232,2.2248,2.2263,2.2279,2.2294,2.2310,2.2326,2.2341,2.2357,2.2373,2.2388,2.2404,2.2419,2.2435,2.2451,2.2466,2.2482,2.2497,2.2513,2.2529,2.2544,2.2560,2.2576,2.2591,2.2607,2.2622,2.2638,2.2654,2.2669,2.2685,2.2701,2.2716,2.2732,2.2747,2.2763,2.2779,2.2794,2.2810,2.2826,2.2841,2.2857,2.2872,2.2888,2.2904,2.2919,2.2935,2.2950,2.2966,2.2982,2.2997,2.3013,2.3029,2.3044,2.3060,2.3075,2.3091,2.3107,2.3122,2.3138,2.3154,2.3169,2.3185,2.3201,2.3216,2.3232,2.3247,2.3263,2.3279,2.3294,2.3310,2.3326,2.3341,2.3357,2.3372,2.3388,2.3404,2.3419,2.3435,2.3451,2.3466,2.3482,2.3497,2.3513,2.3529,2.3544,2.3560,2.3575,2.3591,2.3607,2.3622,2.3638,2.3654,2.3669,2.3685,2.3700,2.3716,2.3732,2.3747,2.3763,2.3779,2.3794,2.3810,2.3825,2.3841,2.3857,2.3872,2.3888,2.3904,2.3919,2.3935,2.3950,2.3966,2.3982,2.3997,2.4013,2.4028,2.4044,2.4060,2.4075,2.4091,2.4107,2.4122,2.4138,2.4153,2.4169,2.4185,2.4200,2.4216,2.4232,2.4247,2.4263,2.4279,2.4294,2.4310,2.4325,2.4341,2.4357,2.4372,2.4388,2.4404,2.4419,2.4435,2.4450,2.4466,2.4482,2.4497,2.4513,2.4529,2.4544,2.4560,2.4575,2.4591,2.4607,2.4622,2.4638,2.4653,2.4669,2.4685,2.4700,2.4716,2.4732,2.4747,2.4763,2.4778,2.4794,2.4810,2.4825,2.4841,2.4857,2.4872,2.4888,2.4903,2.4919,2.4935,2.4950,2.4966,2.4982,2.4997,2.5013,2.5028,2.5044,2.5060,2.5075,2.5091,2.5106,2.5122,2.5138,2.5153,2.5169,2.5185,2.5200,2.5216,2.5231,2.5247,2.5263,2.5278,2.5294,2.5310,2.5325,2.5341,2.5357,2.5372,2.5388,2.5403,2.5419,2.5435,2.5450,2.5466,2.5482,2.5497,2.5513,2.5528,2.5544,2.5560,2.5575,2.5591,2.5607,2.5622,2.5638,2.5653,2.5669,2.5685,2.5700,2.5716,2.5731,2.5747,2.5763,2.5778,2.5794,2.5810,2.5825,2.5841,2.5856,2.5872,2.5888,2.5903,2.5919,2.5935,2.5950,2.5966,2.5981,2.5997,2.6013,2.6028,2.6044,2.6060,2.6075,2.6091,2.6106,2.6122,2.6138,2.6153,2.6169,2.6184,2.6200,2.6216,2.6231,2.6247,2.6263,2.6278,2.6294,2.6309,2.6325,2.6341,2.6356,2.6372,2.6388,2.6403,2.6419,2.6435,2.6450,2.6466,2.6481,2.6497,2.6513,2.6528,2.6544,2.6560,2.6575,2.6591,2.6606,2.6622,2.6638,2.6653,2.6669,2.6685,2.6700,2.6716,2.6731,2.6747,2.6763,2.6778,2.6794,2.6809,2.6825,2.6841,2.6856,2.6872,2.6888,2.6903,2.6919,2.6934,2.6950,2.6966,2.6981,2.6997,2.7013,2.7028,2.7044,2.7059,2.7075,2.7091,2.7106,2.7122,2.7138,2.7153,2.7169,2.7184,2.7200,2.7216,2.7231,2.7247,2.7263,2.7278,2.7294,2.7309,2.7325,2.7341,2.7356,2.7372,2.7387,2.7403,2.7419,2.7434,2.7450,2.7466,2.7481,2.7497,2.7513,2.7528,2.7544,2.7559,2.7575,2.7591,2.7606,2.7622,2.7638,2.7653,2.7669,2.7684,2.7700,2.7716,2.7731,2.7747,2.7762,2.7778,2.7794,2.7809,2.7825,2.7841,2.7856,2.7872,2.7887,2.7903,2.7919,2.7934,2.7950,2.7966,2.7981,2.7997,2.8012,2.8028,2.8044,2.8059,2.8075,2.8091,2.8106,2.8122,2.8138,2.8153,2.8169,2.8184,2.8200,2.8216,2.8231,2.8247,2.8262,2.8278,2.8294,2.8309,2.8325,2.8341,2.8356,2.8372,2.8387,2.8403,2.8419,2.8434,2.8450,2.8465,2.8481,2.8497,2.8512,2.8528,2.8544,2.8559,2.8575,2.8591,2.8606,2.8622,2.8637,2.8653,2.8669,2.8684,2.8700,2.8716,2.8731,2.8747,2.8762,2.8778,2.8794,2.8809,2.8825,2.8840,2.8856,2.8872,2.8887,2.8903,2.8919,2.8934,2.8950,2.8965,2.8981,2.8997,2.9012,2.9028,2.9044,2.9059,2.9075,2.9090,2.9106,2.9122,2.9137,2.9153,2.9169,2.9184,2.9200,2.9216,2.9231,2.9247,2.9262,2.9278,2.9294,2.9309,2.9325,2.9340,2.9356,2.9372,2.9387,2.9403,2.9419,2.9434,2.9450,2.9465,2.9481,2.9497,2.9512,2.9528,2.9543,2.9559,2.9575,2.9590,2.9606,2.9622,2.9637,2.9653,2.9669,2.9684,2.9700,2.9715,2.9731,2.9747,2.9762,2.9778,2.9794,2.9809,2.9825,2.9840,2.9856,2.9872,2.9887,2.9903,2.9918,2.9934,2.9950,2.9965,2.9981,2.9997,3.0012,3.0028,3.0043,3.0059,3.0075,3.0090,3.0106,3.0122,3.0137,3.0153,3.0168,3.0184,3.0200,3.0215,3.0231,3.0247,3.0262,3.0278,3.0294,3.0309,3.0325,3.0340,3.0356,3.0372,3.0387,3.0403,3.0418,3.0434,3.0450,3.0465,3.0481,3.0497,3.0512,3.0528,3.0543,3.0559,3.0575,3.0590,3.0606,3.0622,3.0637,3.0653,3.0668,3.0684,3.0700,3.0715,3.0731,3.0747,3.0762,3.0778,3.0793,3.0809,3.0825,3.0840,3.0856,3.0872,3.0887,3.0903,3.0918,3.0934,3.0950,3.0965,3.0981,3.0996,3.1012,3.1028,3.1043,3.1059,3.1075,3.1090,3.1106,3.1121,3.1137,3.1153,3.1168,3.1184,3.1200,3.1215,3.1231,3.1247,3.1262,3.1278,3.1293,3.1309,3.1325,3.1340,3.1356,3.1372,3.1387,3.1403,3.1418,3.1434,3.1450,3.1465,3.1481,3.1496,3.1512,3.1528,3.1543,3.1559,3.1575,3.1590,3.1606,3.1621,3.1637,3.1653,3.1668,3.1684,3.1700,3.1715,3.1731,3.1746,3.1762,3.1778,3.1793,3.1809,3.1825,3.1840,3.1856,3.1871,3.1887,3.1903,3.1918,3.1934,3.1950,3.1965,3.1981,3.1996,3.2012,3.2028,3.2043,3.2059,3.2074,3.2090,3.2106,3.2121,3.2137,3.2153,3.2168,3.2184,3.2199,3.2215,3.2231,3.2246,3.2262,3.2278,3.2293,3.2309,3.2325,3.2340,3.2356,3.2371,3.2387,3.2403,3.2418,3.2434,3.2450,3.2465,3.2481,3.2496,3.2512,3.2528,3.2543,3.2559,3.2575,3.2590,3.2606,3.2621,3.2637,3.2653,3.2668,3.2684,3.2699,3.2715,3.2731,3.2746,3.2762,3.2778,3.2793,3.2809,3.2824,3.2840,3.2856,3.2871,3.2887,3.2903,3.2918,3.2934,3.2949,3.2965,3.2981,3.2996,3.3012,3.3028,3.3043,3.3059,3.3074,3.3090,3.3106,3.3121,3.3137,3.3152,3.3168,3.3184,3.3199,3.3215,3.3231,3.3246,3.3262,3.3277,3.3293,3.3309,3.3324,3.3340,3.3356,3.3371,3.3387,3.3403,3.3418,3.3434,3.3449,3.3465,3.3481,3.3496,3.3512,3.3528,3.3543,3.3559,3.3574,3.3590,3.3606,3.3621,3.3637,3.3653,3.3668,3.3684,3.3699,3.3715,3.3731,3.3746,3.3762,3.3777,3.3793,3.3809,3.3824,3.3840,3.3856,3.3871,3.3887,3.3902,3.3918,3.3934,3.3949,3.3965,3.3981,3.3996,3.4012,3.4027,3.4043,3.4059,3.4074,3.4090,3.4106,3.4121,3.4137,3.4152,3.4168,3.4184,3.4199,3.4215,3.4230,3.4246,3.4262,3.4277,3.4293,3.4309,3.4324,3.4340,3.4355,3.4371,3.4387,3.4402,3.4418,3.4434,3.4449,3.4465,3.4481,3.4496,3.4512,3.4527,3.4543,3.4559,3.4574,3.4590,3.4606,3.4621,3.4637,3.4652,3.4668,3.4684,3.4699,3.4715,3.4731,3.4746,3.4762,3.4777,3.4793,3.4809,3.4824,3.4840,3.4855,3.4871,3.4887,3.4902,3.4918,3.4934,3.4949,3.4965,3.4980,3.4996,3.5012,3.5027,3.5043,3.5059,3.5074,3.5090,3.5105,3.5121,3.5137,3.5152,3.5168,3.5183,3.5199,3.5215,3.5230,3.5246,3.5262,3.5277,3.5293,3.5308,3.5324,3.5340,3.5355,3.5371,3.5387,3.5402,3.5418,3.5433,3.5449,3.5465,3.5480,3.5496,3.5512,3.5527,3.5543,3.5559,3.5574,3.5590,3.5605,3.5621,3.5637,3.5652,3.5668,3.5684,3.5699,3.5715,3.5730,3.5746,3.5762,3.5777,3.5793,3.5808,3.5824,3.5840,3.5855,3.5871,3.5887,3.5902,3.5918,3.5933,3.5949,3.5965,3.5980,3.5996,3.6012,3.6027,3.6043,3.6058,3.6074,3.6090,3.6105,3.6121,3.6137,3.6152,3.6168,3.6183,3.6199,3.6215,3.6230,3.6246,3.6261,3.6277,3.6293,3.6308,3.6324,3.6340,3.6355,3.6371,3.6386,3.6402,3.6418,3.6433,3.6449,3.6465,3.6480,3.6496,3.6511,3.6527,3.6543,3.6558,3.6574,3.6590,3.6605,3.6621,3.6637,3.6652,3.6668,3.6683,3.6699,3.6715,3.6730,3.6746,3.6762,3.6777,3.6793,3.6808,3.6824,3.6840,3.6855,3.6871,3.6886,3.6902,3.6918,3.6933,3.6949,3.6965,3.6980,3.6996,3.7011,3.7027,3.7043,3.7058,3.7074,3.7090,3.7105,3.7121,3.7136,3.7152,3.7168,3.7183,3.7199,3.7215,3.7230,3.7246,3.7261,3.7277,3.7293,3.7308,3.7324,3.7339,3.7355,3.7371,3.7386,3.7402,3.7418,3.7433,3.7449,3.7464,3.7480,3.7496,3.7511,3.7527,3.7543,3.7558,3.7574,3.7589,3.7605,3.7621,3.7636,3.7652,3.7668,3.7683,3.7699,3.7715,3.7730,3.7746,3.7761,3.7777,3.7793,3.7808,3.7824,3.7840,3.7855,3.7871,3.7886,3.7902,3.7918,3.7933,3.7949,3.7964,3.7980,3.7996,3.8011,3.8027,3.8043,3.8058,3.8074,3.8089,3.8105,3.8121,3.8136,3.8152,3.8168,3.8183,3.8199,3.8214,3.8230,3.8246,3.8261,3.8277,3.8293,3.8308,3.8324,3.8339,3.8355,3.8371,3.8386,3.8402,3.8417,3.8433,3.8449,3.8464,3.8480,3.8496,3.8511,3.8527,3.8542,3.8558,3.8574,3.8589,3.8605,3.8621,3.8636,3.8652,3.8668,3.8683,3.8699,3.8714,3.8730,3.8746,3.8761,3.8777,3.8793,3.8808,3.8824,3.8839,3.8855,3.8871,3.8886,3.8902,3.8918,3.8933,3.8949,3.8964,3.8980,3.8996,3.9011,3.9027,3.9042,3.9058,3.9074,3.9089,3.9105,3.9121,3.9136,3.9152,3.9167,3.9183,3.9199,3.9214,3.9230,3.9246,3.9261,3.9277,3.9292,3.9308,3.9324,3.9339,3.9355,3.9371,3.9386,3.9402,3.9417,3.9433,3.9449,3.9464,3.9480,3.9495,3.9511,3.9527,3.9542,3.9558,3.9574,3.9589,3.9605,3.9620,3.9636,3.9652,3.9667,3.9683,3.9699,3.9714,3.9730,3.9746,3.9761,3.9777,3.9792,3.9808,3.9824,3.9839,3.9855,3.9871,3.9886,3.9902,3.9917,3.9933,3.9949,3.9964,3.9980,3.9996,4.0011,4.0027,4.0042,4.0058,4.0074,4.0089,4.0105,4.0121,4.0136,4.0152,4.0167,4.0183,4.0199,4.0214,4.0230,4.0245,4.0261,4.0277,4.0292,4.0308,4.0324,4.0339,4.0355,4.0370,4.0386,4.0402,4.0417,4.0433,4.0449,4.0464,4.0480,4.0495,4.0511,4.0527,4.0542,4.0558,4.0574,4.0589,4.0605,4.0620,4.0636,4.0652,4.0667,4.0683,4.0698,4.0714,4.0730,4.0745,4.0761,4.0777,4.0792,4.0808,4.0823,4.0839,4.0855,4.0870,4.0886,4.0902,4.0917,4.0933,4.0949,4.0964,4.0980,4.0995,4.1011,4.1027,4.1042,4.1058,4.1073,4.1089,4.1105,4.1120,4.1136,4.1152,4.1167,4.1183,4.1199,4.1214,4.1230,4.1245,4.1261,4.1277,4.1292,4.1308,4.1323,4.1339,4.1355,4.1370,4.1386,4.1402,4.1417,4.1433,4.1448,4.1464,4.1480,4.1495,4.1511,4.1527,4.1542,4.1558,4.1573,4.1589,4.1605,4.1620,4.1636,4.1652,4.1667,4.1683,4.1698,4.1714,4.1730,4.1745,4.1761,4.1776,4.1792,4.1808,4.1823,4.1839,4.1855,4.1870,4.1886,4.1901,4.1917,4.1933,4.1948,4.1964,4.1980,4.1995,4.2011,4.2027,4.2042,4.2058,4.2073,4.2089,4.2105,4.2120,4.2136,4.2151,4.2167,4.2183,4.2198,4.2214,4.2230,4.2245,4.2261,4.2277,4.2292,4.2308,4.2323,4.2339,4.2355,4.2370,4.2386,4.2401,4.2417,4.2433,4.2448,4.2464,4.2480,4.2495,4.2511,4.2526,4.2542,4.2558,4.2573,4.2589,4.2605,4.2620,4.2636,4.2651,4.2667,4.2683,4.2698,4.2714,4.2730,4.2745,4.2761,4.2776,4.2792,4.2808,4.2823,4.2839,4.2854,4.2870,4.2886,4.2901,4.2917,4.2933,4.2948,4.2964,4.2979,4.2995,4.3011,4.3026,4.3042,4.3058,4.3073,4.3089,4.3105,4.3120,4.3136,4.3151,4.3167,4.3183,4.3198,4.3214,4.3229,4.3245,4.3261,4.3276,4.3292,4.3308,4.3323,4.3339,4.3355,4.3370,4.3386,4.3401,4.3417,4.3433,4.3448,4.3464,4.3479,4.3495,4.3511,4.3526,4.3542,4.3558,4.3573,4.3589,4.3604,4.3620,4.3636,4.3651,4.3667,4.3683,4.3698,4.3714,4.3729,4.3745,4.3761,4.3776,4.3792,4.3808,4.3823,4.3839,4.3854,4.3870,4.3886,4.3901,4.3917,4.3932,4.3948,4.3964,4.3979,4.3995,4.4011,4.4026,4.4042,4.4057,4.4073,4.4089,4.4104,4.4120,4.4136,4.4151,4.4167,4.4183,4.4198,4.4214,4.4229,4.4245,4.4261,4.4276,4.4292,4.4307,4.4323,4.4339,4.4354,4.4370,4.4386,4.4401,4.4417,4.4433,4.4448,4.4464,4.4479,4.4495,4.4511,4.4526,4.4542,4.4557,4.4573,4.4589,4.4604,4.4620,4.4636,4.4651,4.4667,4.4682,4.4698,4.4714,4.4729,4.4745,4.4761,4.4776,4.4792,4.4807,4.4823,4.4839,4.4854,4.4870,4.4886,4.4901,4.4917,4.4932,4.4948,4.4964,4.4979,4.4995,4.5011,4.5026,4.5042,4.5057,4.5073,4.5089,4.5104,4.5120,4.5135,4.5151,4.5167,4.5182,4.5198,4.5214,4.5229,4.5245,4.5261,4.5276,4.5292,4.5307,4.5323,4.5339,4.5354,4.5370,4.5385,4.5401,4.5417,4.5432,4.5448,4.5464,4.5479,4.5495,4.5511,4.5526,4.5542,4.5557,4.5573,4.5589,4.5604,4.5620,4.5635,4.5651,4.5667,4.5682,4.5698,4.5714,4.5729,4.5745,4.5760,4.5776,4.5792,4.5807,4.5823,4.5839,4.5854,4.5870,4.5886,4.5901,4.5917,4.5932,4.5948,4.5964,4.5979,4.5995,4.6010,4.6026,4.6042,4.6057,4.6073,4.6089,4.6104,4.6120,4.6135,4.6151,4.6167,4.6182,4.6198,4.6213,4.6229,4.6245,4.6260,4.6276,4.6292,4.6307,4.6323,4.6339,4.6354,4.6370,4.6385,4.6401,4.6417,4.6432,4.6448,4.6463,4.6479,4.6495,4.6510,4.6526,4.6542,4.6557,4.6573,4.6589,4.6604,4.6620,4.6635,4.6651,4.6667,4.6682,4.6698,4.6714,4.6729,4.6745,4.6760,4.6776,4.6792,4.6807,4.6823,4.6838,4.6854,4.6870, };
char mqttdata[16];

void connectToWiFi() {
  display.clearDisplay();
  display.setTextSize(1);             
  display.setTextColor(WHITE);
  display.setCursor(15,20);
  display.println("Connectiog to ");
  display.setCursor(32,32);             
  display.println(SSID);
  display.display();
  WiFi.begin(SSID, PWD);
  uint8_t i = 0;
  bool y = 0;
  while (WiFi.status() != WL_CONNECTED) {
    if(y == 0){
      display.setTextSize(2);    
      display.setCursor(20+i,45);
      display.println("."); 
      display.display();
    }else{
      display.setTextSize(2);    
      display.setCursor(20+i,20);
      display.println("."); 
      display.display();
    }
    i+=10;
    if(i > 59){
      display.clearDisplay();
      i = 0;
      if(y == 0)
        y = 1;
      else
        y = 0;  
    }
    delay(500);
  }
  display.clearDisplay();
  display.setTextSize(1);             
  display.setTextColor(WHITE);
  display.setCursor(15,20);
  display.println("!Connected.!");
  display.display();
}

void setup(){
    Serial.begin(115200);
    pinMode(LEDQ1G,OUTPUT);
    pinMode(LEDQ2G,OUTPUT);
    pinMode(LEDQ3G,OUTPUT);
    pinMode(LEDQ4G,OUTPUT);
    digitalWrite(LEDQ1G,HIGH);
    digitalWrite(LEDQ2G,HIGH);
    digitalWrite(LEDQ3G,HIGH);
    digitalWrite(LEDQ4G,HIGH);
    if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
      for(;;);
    }
    connectToWiFi();
    display.clearDisplay();
    display.setTextSize(1);             
    display.setTextColor(WHITE);
    display.setCursor(15,32);             
    display.println("MQTT Server:");
    display.setCursor(30,45);
    display.println(mqttServer);    
    display.display();
    delay(500);
    client.setServer(mqttServer, mqttPort);
    while (!client.connected()) {
      display.clearDisplay();
      display.setCursor(15,32);             
      display.println("Connecting to MQTT...");
      display.display();
      delay(500);
      if (client.connect("ESP32Client")) {
        display.clearDisplay();
        display.setCursor(15,32);             
        display.println("Connected!!!");
        display.display();
        delay(500);
      } else {
        display.clearDisplay();
        display.setCursor(15,32);             
        display.println("failed with state");
        display.display();
        delay(2000);
      }
    }  
  client.publish("test/tds/1", "Hello from ESP32");

  delay(2000);
  display.setFont(&FreeSerif9pt7b);
  display.clearDisplay();
  display.setTextSize(1);             
  display.setTextColor(WHITE);
  display.setCursor(15,32);             
  display.println("Project Begin");
  display.display();
  delay(2000);
}

void loop(){
  static unsigned long analogSampleTimepoint = millis();
   if(millis()-analogSampleTimepoint > 40U){    //every 40 milliseconds,read the analog value from the ADC
     analogSampleTimepoint = millis();
     analogBuffer[Q1][analogBufferIndex] = analogRead(Quarter1);    //read the analog value and store into the buffer
     analogBuffer[Q2][analogBufferIndex] = analogRead(Quarter2);    //read the analog value and store into the buffer
     analogBuffer[Q3][analogBufferIndex] = analogRead(Quarter3);    //read the analog value and store into the buffer
     analogBuffer[Q4][analogBufferIndex] = analogRead(Quarter4);    //read the analog value and store into the buffer
     analogBufferIndex++;
     if(analogBufferIndex == SCOUNT) 
         analogBufferIndex = 0;
   }
   static unsigned long printTimepoint = millis();
   if(millis()-printTimepoint > 800U){
      printTimepoint = millis();
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++){
        analogBufferTemp[Q1][copyIndex]= analogBuffer[Q1][copyIndex];
        analogBufferTemp[Q2][copyIndex]= analogBuffer[Q2][copyIndex];
        analogBufferTemp[Q3][copyIndex]= analogBuffer[Q3][copyIndex];
        analogBufferTemp[Q4][copyIndex]= analogBuffer[Q4][copyIndex];
      }
      averageVoltage[Q1] = getMedianNum(analogBufferTemp[Q1],SCOUNT) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage[Q2] = getMedianNum(analogBufferTemp[Q2],SCOUNT) * (float)VREF / 1024.0;
      averageVoltage[Q3] = getMedianNum(analogBufferTemp[Q3],SCOUNT) * (float)VREF / 1024.0;
      averageVoltage[Q4] = getMedianNum(analogBufferTemp[Q4],SCOUNT) * (float)VREF / 1024.0;
      
      float compensationCoefficient=1.0+0.02*(37-25.0);    //temperature compensation formula: fFinalResult(37^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
      float compensationVolatgeQ1=averageVoltage[Q1]/compensationCoefficient;  //temperature compensation
      float compensationVolatgeQ2=averageVoltage[Q2]/compensationCoefficient;  
      float compensationVolatgeQ3=averageVoltage[Q3]/compensationCoefficient;  
      float compensationVolatgeQ4=averageVoltage[Q4]/compensationCoefficient;  
      
      Quarter[Q1][j]=(133.42*compensationVolatgeQ1*compensationVolatgeQ1*compensationVolatgeQ1 - 255.86*compensationVolatgeQ1*compensationVolatgeQ1 + 857.39*compensationVolatgeQ1)*0.5; //convert voltage value to tds value
      Quarter[Q2][j]=(133.42*compensationVolatgeQ2*compensationVolatgeQ2*compensationVolatgeQ2 - 255.86*compensationVolatgeQ2*compensationVolatgeQ2 + 857.39*compensationVolatgeQ2)*0.5;
      Quarter[Q3][j]=(133.42*compensationVolatgeQ3*compensationVolatgeQ3*compensationVolatgeQ3 - 255.86*compensationVolatgeQ3*compensationVolatgeQ3 + 857.39*compensationVolatgeQ3)*0.5;
      Quarter[Q4][j]=(133.42*compensationVolatgeQ4*compensationVolatgeQ4*compensationVolatgeQ4 - 255.86*compensationVolatgeQ4*compensationVolatgeQ4 + 857.39*compensationVolatgeQ4)*0.5;
      Quarter[Q1][j] = DEE[int(Quarter[Q1][j])];
      Quarter[Q2][j] = DEE[int(Quarter[Q2][j])];
      Quarter[Q3][j] = DEE[int(Quarter[Q3][j])];
      Quarter[Q4][j] = DEE[int(Quarter[Q4][j])];

      if(j%14 == 0 && j != 0){
        for(int i = 0;i<4;i++)
          tempQ[i] = 0.0;
        for(int i = 0;i<4;i++)
          for(int k = 0;k<j;k++)
            tempQ[i] += Quarter[i][k];
        for(int i = 0;i<4;i++)
          for(int k = 0;k<j;k++)
            tempQ[i] -= Quarter[i][j];
        for(int i = 0;i<4;i++){
          if(tempQ[i] < 0){
            tempQ[i] *= -1;
          }
        }
        for(int i = 0;i<4;i++){
          if(tempQ[i] > 2.0){
            sprintf(mqttdata, "Quarter %d is Mastitis.", i+1);
            client.publish("test/tds/result", mqttdata);
            digitalWrite(LEDG[i],LOW);
          }
          if(tempQ[i] <= 2.0)
            digitalWrite(LEDG[i],HIGH);
        }
        j = 0;
      }
      display.clearDisplay();
      display.setTextSize(1);             
      display.setTextColor(WHITE);
      display.setCursor(0,0);             
      display.print("Quarter 1 EC:");
      display.setTextSize(1);             
      display.setTextColor(WHITE);
      if(Quarter[Q1][0]> 4.5)
        display.print(">4.6870");
      else if(Quarter[Q1][j]<0.0017)
        display.print("<0.0016");
      else
        display.print(Quarter[Q1][j]);
      display.println(" mS");
      
      display.setCursor(20,0);             
      display.print("Quarter 1 EC:");
      display.setTextSize(1);             
      display.setTextColor(WHITE);
      if(Quarter[Q1][0]> 4.5)
        display.print(">4.6870");
      else if(Quarter[Q1][j]<0.0017)
        display.print("<0.0016");
      else
        display.print(Quarter[Q1][j]);
      display.println(" mS");
      
      display.setCursor(35,0);             
      display.print("Quarter 2 EC:");
      display.setTextSize(1);             
      display.setTextColor(WHITE);
      if(Quarter[Q1][0]> 4.5)
        display.print(">4.6870");
      else if(Quarter[Q1][j]<0.0017)
        display.print("<0.0016");
      else
        display.print(Quarter[Q1][j]);
      display.println(" mS");
      display.setCursor(45,0);             
      display.print("Quarter 1 EC:");
      display.setTextSize(1);             
      display.setTextColor(WHITE);
      if(Quarter[Q1][0]> 4.5)
        display.print(">4.6870");
      else if(Quarter[Q1][j]<0.0017)
        display.print("<0.0016");
      else
        display.print(Quarter[Q1][j]);
      display.println(" mS");
      display.display();

      sprintf(mqttdata, "%f", Quarter[Q1][j]);
      client.publish("test/tds/1", mqttdata);
      sprintf(mqttdata, "%f", Quarter[Q2][j]);
      client.publish("test/tds/2", mqttdata);
      sprintf(mqttdata, "%f", Quarter[Q3][j]);
      client.publish("test/tds/3", mqttdata);
      sprintf(mqttdata, "%f", Quarter[Q4][j]);
      client.publish("test/tds/4", mqttdata);
      j++;
   }
}
int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
    bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++){
    for (i = 0; i < iFilterLen - j - 1; i++){
      if (bTab[i] > bTab[i + 1]){
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0)
    bTemp = bTab[(iFilterLen - 1) / 2];
  else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  return bTemp;
}
